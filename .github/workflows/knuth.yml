name: Build and Test

on: [push, pull_request]

jobs:
  generate-matrix:
    name: Generate Job Matrix
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Generate Job Matrix
        id: set-matrix
        env:
          MATRIX: '{"config": [{"name": "Linux NodeJS 14","nodejs_version": "14","os": "ubuntu-20.04","os_kind": "linux"},
                               {"name": "Linux NodeJS 12","nodejs_version": "12","os": "ubuntu-20.04","os_kind": "linux"},
                               {"name": "macOS NodeJS 12","nodejs_version": "14","os": "macos-10.15","os_kind": "macos"},
                               {"name": "Windows NodeJS 14","nodejs_version": "14","os": "windows-2019","os_kind": "windows"},
                               ]}'
        run: |
          # MATRIX=$(cat ./ci_utils/.github/matrix.json)
          echo "${MATRIX}"
          echo "::set-output name=matrix::${MATRIX}"
          
  builds:
    needs: generate-matrix
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-python@v1
        with:
          python-version: "3.8"
  
      # - name: Install Dependencies (Unix)
      #   # if: ${{ matrix.config.compiler != 'Visual Studio' }}
      #   run: |
      #     chmod +x ci_utils/.travis/install.sh
      #     ./ci_utils/.travis/install.sh
      #   shell: bash

      # - name: Install Dependencies (Windows)
      #   if: ${{ matrix.config.compiler == 'Visual Studio' }}
      #   run: |
      #     set PATH=%PYTHON%;%PYTHON%/Scripts/;%PATH%;
      #     python.exe --version
      #     cmake --version
      #     python.exe -m pip install --upgrade pip
      #     pip.exe install conan_package_tools==0.34.2
      #     pip.exe install kthbuild --upgrade
      #     conan user
      #   shell: cmd

      - name: Settting EnvVars (Unix)
        if: ${{ matrix.config.os_kind != 'windows' }}
        shell: bash
        run: |
          echo "NODEJS_VERSION=${{ matrix.config.nodejs_version }}" >> $GITHUB_ENV

      - name: Settting EnvVars (Windows)
        if: ${{ matrix.config.os_kind == 'windows' }}
        shell: powershell
        run: |
          echo "NODEJS_VERSION=${{ matrix.config.nodejs_version }}" >> $Env:GITHUB_ENV

      - name: Build (Linux)
        if: ${{ matrix.config.os_kind == 'linux' }}
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.NODE_PRE_GYP_GITHUB_TOKEN }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        shell: bash
        run: |
          # echo ${NPM_AUTH_TOKEN}
          # echo ${NPM_EMAIL}
          # echo ${NODEJS_VERSION}
          # echo ${NODE_PRE_GYP_GITHUB_TOKEN}
                  
          chmod a+x .travis/entrypoint.sh
          /usr/bin/docker run -u root --rm -e NPM_AUTH_TOKEN=$NPM_AUTH_TOKEN -e NPM_EMAIL=$NPM_EMAIL -e NODEJS_VERSION=$NODEJS_VERSION -e NODE_PRE_GYP_GITHUB_TOKEN=$NODE_PRE_GYP_GITHUB_TOKEN -v ${PWD}:/home/conan/project -v ${PWD}/.travis/entrypoint.sh:/tmp/entrypoint.sh conanio/gcc10 /bin/bash -c /tmp/entrypoint.sh

      - uses: actions/setup-node@v2
        if: ${{ matrix.config.os_kind == 'windows' }}
        with:
          node-version: '${{ matrix.config.nodejs_version }}'

      - name: Build (Windows)
        if: ${{ matrix.config.os_kind == 'windows' }}
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.NODE_PRE_GYP_GITHUB_TOKEN }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        shell: powershell
        run: |
          # Write-Host "CONAN_VISUAL_VERSIONS: $Env:CONAN_VISUAL_VERSIONS"

          npm --version
          npm -g install npm@next
          npm --version
          npm install -g node-gyp
          npm install -g node-pre-gyp
          npm install -g aws-sdk
          npm install -g node-pre-gyp-github

          pip --version
          pip install kthbuild --upgrade
          python --version
          conan user # It creates the conan data directory

          node --version
          npm --version
          python --version
          # cl /version

          Write-Host "FerFerFer"
          node -p "process.arch"
          Write-Host "FerFerFer"

          conan user
          conan remote add kth_temp https://api.bintray.com/conan/k-nuth/kth
          conan install . -s compiler.runtime=MT
          cd
          dir 

          npm install
          cd
          dir

          # node-pre-gyp configure build package
          # # node-pre-gyp configure --verbose
          # # node-pre-gyp build --verbose
          # # node-pre-gyp package --verbose
          # node-pre-gyp-github publish --release




          # $ErrorActionPreference = 'SilentlyContinue'
          # conan remote add kth https://api.bintray.com/conan/k-nuth/kth
          # $ErrorActionPreference = 'Continue'

          # # conan info . --only None
          # # conan info . --only None -s compiler=gcc -s compiler.version=5 -s compiler.libcxx=libstdc++
          # python ci_utils/process_conan_reqs.py

          # $ErrorActionPreference = 'SilentlyContinue'
          # conan remove "*" -f
          # conan remote remove kth
          # conan remote remove kthbuild_kth_temp_
          # $ErrorActionPreference = 'Continue'

          # python build.py





# References:
  # https://github.com/radareorg/radare2